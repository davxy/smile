#![allow(dead_code)]
/* automatically generated by rust-bindgen 0.56.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CRY_AES_BLOCK_SIZE: u32 = 16;
pub const CRY_AFFINE_KEYMAX: u32 = 32;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::core::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::core::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cry_aes_ctx {
    pub keys: [u32; 60usize],
    #[doc = " Maximum size of key schedule"]
    pub nr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cry_aes_ctx() {
    assert_eq!(
        ::core::mem::size_of::<cry_aes_ctx>(),
        244usize,
        concat!("Size of: ", stringify!(cry_aes_ctx))
    );
    assert_eq!(
        ::core::mem::align_of::<cry_aes_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(cry_aes_ctx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_aes_ctx>())).keys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_aes_ctx),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_aes_ctx>())).nr as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_aes_ctx),
            "::",
            stringify!(nr)
        )
    );
}
extern "C" {
    #[doc = " Context initialization."]
    #[doc = ""]
    #[doc = " @param ctx   AES context."]
    pub fn cry_aes_init(ctx: *mut cry_aes_ctx);
}
extern "C" {
    #[doc = " Context cleanup."]
    #[doc = ""]
    #[doc = " @param ctx   AES context."]
    pub fn cry_aes_clear(ctx: *mut cry_aes_ctx);
}
extern "C" {
    #[doc = " Set the AES key."]
    #[doc = ""]
    #[doc = " @param ctx   AES context."]
    #[doc = " @param key   Pointer to the key."]
    #[doc = " @param size  Key size in bytes."]
    #[doc = "              Shall be 16 for AES-128, 24 for AES-192, 32 for AES-256."]
    pub fn cry_aes_key_set(
        ctx: *mut cry_aes_ctx,
        key: *const ::std::os::raw::c_uchar,
        size: size_t,
    );
}
extern "C" {
    #[doc = " Encrypt the data pointed by src into dst."]
    #[doc = " The function works in-place so dst can be equal to src."]
    #[doc = ""]
    #[doc = " @param ctx   AES context."]
    #[doc = " @param dst   Destination buffer (ciphertext)."]
    #[doc = " @param src   Source buffer (cleartext)."]
    #[doc = " @param size  Size of the data. Must be a multiple of 16."]
    pub fn cry_aes_encrypt(
        ctx: *mut cry_aes_ctx,
        dst: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        size: size_t,
    );
}
extern "C" {
    #[doc = " Decrypt the data pointed by src into dst."]
    #[doc = " The function works in-place so dst can be equal to src."]
    #[doc = ""]
    #[doc = " @param ctx   AES context."]
    #[doc = " @param dst   Destination buffer (cleartext)."]
    #[doc = " @param src   Source buffer (ciphertext)."]
    #[doc = " @param size  Size of the data. Must be a multiple of 16."]
    pub fn cry_aes_decrypt(
        ctx: *mut cry_aes_ctx,
        dst: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        size: size_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cry_affine_ctx {
    pub keya: [::std::os::raw::c_uchar; 32usize],
    pub inva: [::std::os::raw::c_uchar; 32usize],
    pub keyb: [::std::os::raw::c_uchar; 32usize],
    pub keylen: size_t,
}
#[test]
fn bindgen_test_layout_cry_affine_ctx() {
    assert_eq!(
        ::core::mem::size_of::<cry_affine_ctx>(),
        104usize,
        concat!("Size of: ", stringify!(cry_affine_ctx))
    );
    assert_eq!(
        ::core::mem::align_of::<cry_affine_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(cry_affine_ctx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_affine_ctx>())).keya as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_affine_ctx),
            "::",
            stringify!(keya)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_affine_ctx>())).inva as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_affine_ctx),
            "::",
            stringify!(inva)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_affine_ctx>())).keyb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_affine_ctx),
            "::",
            stringify!(keyb)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_affine_ctx>())).keylen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_affine_ctx),
            "::",
            stringify!(keylen)
        )
    );
}
extern "C" {
    pub fn cry_affine_init(
        ctx: *mut cry_affine_ctx,
        keya: *const ::std::os::raw::c_uchar,
        keyb: *const ::std::os::raw::c_uchar,
        keylen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cry_affine_encrypt(
        ctx: *mut cry_affine_ctx,
        out: *mut ::std::os::raw::c_uchar,
        in_: *const ::std::os::raw::c_uchar,
        len: size_t,
    );
}
extern "C" {
    pub fn cry_affine_decrypt(
        ctx: *mut cry_affine_ctx,
        out: *mut ::std::os::raw::c_uchar,
        in_: *const ::std::os::raw::c_uchar,
        len: size_t,
    );
}
#[doc = " ARC4 cipher context."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cry_arc4_ctx {
    pub x: ::std::os::raw::c_uchar,
    #[doc = " Permutation index"]
    pub y: ::std::os::raw::c_uchar,
    #[doc = " Permutation index"]
    pub s: [::std::os::raw::c_uchar; 256usize],
}
#[test]
fn bindgen_test_layout_cry_arc4_ctx() {
    assert_eq!(
        ::core::mem::size_of::<cry_arc4_ctx>(),
        258usize,
        concat!("Size of: ", stringify!(cry_arc4_ctx))
    );
    assert_eq!(
        ::core::mem::align_of::<cry_arc4_ctx>(),
        1usize,
        concat!("Alignment of ", stringify!(cry_arc4_ctx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_arc4_ctx>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_arc4_ctx),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_arc4_ctx>())).y as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_arc4_ctx),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cry_arc4_ctx>())).s as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cry_arc4_ctx),
            "::",
            stringify!(s)
        )
    );
}
extern "C" {
    #[doc = " Context initialization."]
    #[doc = ""]
    #[doc = " @param ctx       ARC4 context."]
    pub fn cry_arc4_init(ctx: *mut cry_arc4_ctx);
}
extern "C" {
    #[doc = " Context cleanup."]
    #[doc = ""]
    #[doc = " @param ctx       ARC4 context."]
    pub fn cry_arc4_clear(ctx: *mut cry_arc4_ctx);
}
extern "C" {
    #[doc = " Set the cipher key."]
    #[doc = ""]
    #[doc = " @param ctx   ARC4 context."]
    #[doc = " @param key   Cipher key."]
    #[doc = " @param size  Cipher key size."]
    pub fn cry_arc4_key_set(
        ctx: *mut cry_arc4_ctx,
        key: *const ::std::os::raw::c_uchar,
        size: size_t,
    );
}
extern "C" {
    #[doc = " Encryption/Decryption function."]
    #[doc = ""]
    #[doc = " @param ctx   ARC4 context."]
    #[doc = " @param dst   Destination buffer."]
    #[doc = " @param src   Source buffer."]
    #[doc = " @param size  Number of bytes."]
    pub fn cry_arc4_crypt(
        ctx: *mut cry_arc4_ctx,
        dst: *mut ::std::os::raw::c_uchar,
        src: *const ::std::os::raw::c_uchar,
        size: size_t,
    );
}
extern "C" {
    pub fn cry_base64_encode(
        out: *mut ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn cry_base64_decode(
        out: *mut ::std::os::raw::c_char,
        in_: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> size_t;
}
